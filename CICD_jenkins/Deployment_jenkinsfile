pipeline {
    agent any

    environment {
        GHCR_USERNAME = credentials('GHCR_USERNAME')  // GitHub Container Registry Username
        GHCR_TOKEN = credentials('GHCR_TOKEN')        // GitHub Container Registry Token
        AZURE_CREDENTIALS = credentials('AZURE_CREDENTIALS')  // Azure JSON credentials
        AZURE_RESOURCE_GROUP = credentials('AZURE_RESOURCE_GROUP')
        AKS_CLUSTER_NAME = credentials('AKS_CLUSTER_NAME')
    }

    stages {

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Log in to GHCR') {
            steps {
                script {
                    sh 'echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin'
                }
            }
        }

        stage('Authenticate to Azure') {
            steps {
                script {
                    sh 'echo "$AZURE_CREDENTIALS" > azure-credentials.json'
                    sh '''
                    CLIENT_ID=$(jq -r .clientId azure-credentials.json)
                    CLIENT_SECRET=$(jq -r .clientSecret azure-credentials.json)
                    TENANT_ID=$(jq -r .tenantId azure-credentials.json)

                    az login --service-principal --username "$CLIENT_ID" --password "$CLIENT_SECRET" --tenant "$TENANT_ID"
                    '''
                }
            }
        }

        stage('Set AKS Context') {
            steps {
                script {
                    sh 'az aks get-credentials --resource-group "$AZURE_RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME" --overwrite-existing'
                }
            }
        }

        stage('Fetch Latest Image Tags and Update Deployments') {
            steps {
                script {
                    sh '''
                    DEPLOYMENTS=$(kubectl get deployments -o jsonpath="{.items[*].metadata.name}")

                    for deployment in $DEPLOYMENTS; do
                        # Skip Redis-based deployments as they use public images
                        if [[ "$deployment" == "redis" || "$deployment" == "redis-cart" ]]; then
                            echo "‚ö†Ô∏è Skipping $deployment as it is a public Redis image."
                            continue
                        fi

                        echo "üöÄ Checking if $deployment exists in GHCR..."

                        API_URL="https://api.github.com/users/$GHCR_USERNAME/packages/container/${deployment}/versions"

                        # Check if the package exists in GHCR before fetching tags
                        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $GHCR_TOKEN" "$API_URL")

                        if [[ "$HTTP_STATUS" -ne 200 ]]; then
                            echo "‚ö†Ô∏è $deployment not found in GHCR. Skipping..."
                            continue
                        fi

                        echo "üì¶ Fetching latest tag for $deployment..."

                        # Fetch the latest tag safely
                        LATEST_TAG=$(curl -s -L -H "Accept: application/vnd.github+json" \
                                    -H "Authorization: Bearer $GHCR_TOKEN" \
                                    "$API_URL" | jq -r '.[0].metadata.container.tags[0]')

                        # Validate if LATEST_TAG is properly extracted
                        if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "null" ]]; then
                            echo "‚ö†Ô∏è No tags found for $deployment! Skipping..."
                            continue
                        fi

                        echo "‚úÖ Latest tag for $deployment: $LATEST_TAG"

                        # Get the actual container name inside the deployment
                        CONTAINER_NAME=$(kubectl get deployment $deployment -o jsonpath="{.spec.template.spec.containers[0].name}")

                        echo "üîÑ Updating container $CONTAINER_NAME in deployment $deployment..."

                        # Update the deployment in AKS with the latest image
                        kubectl set image deployment/$deployment $CONTAINER_NAME=ghcr.io/$GHCR_USERNAME/$deployment:$LATEST_TAG --namespace default
                    done
                    '''
                }
            }
        }
    }
}
